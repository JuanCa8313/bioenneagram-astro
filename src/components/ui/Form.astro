---
import type { Form } from '~/types';
import Button from '~/components/ui/Button.astro';

const { inputs, textarea, disclaimer, button = 'Contact us', description = '', ...formProps } = Astro.props as Form;
---

<form {...formProps}>
  {
    inputs &&
      inputs.map(
        ({ type = 'text', name, label = '', error, autocomplete = 'on', placeholder = '', options = [] }) =>
          name && (
            <div class="mb-6">
              {label && (
                <label for={name} class="block text-sm font-medium">
                  {label}
                </label>
                <p>{error}</p>
              )}
              {
                // Se añadió una condición para el tipo 'radio'
                type === 'radio' ? (
                  <div>
                    {
                      // Se añadió el mapeo de las opciones para generar inputs de tipo radio y sus etiquetas asociadas
                      options.map(option => (
                        <div class="flex items-center mb-2">
                          <input
                            type="radio"
                            name={name}
                            id={`${name}-${option.value}`}
                            value={option.value}
                            class="mr-2 cursor-pointer"
                          />
                          <label for={`${name}-${option.value}`} class="cursor-pointer text-sm text-gray-600 dark:text-gray-400">
                            {option.label}
                          </label>
                        </div>
                      ))
                    }
                  </div>
                ) : (
                  <input
                    type={type}
                    name={name}
                    id={name}
                    autocomplete={autocomplete}
                    placeholder={placeholder}
                    class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
                  />
                )
              }
            </div>
          )
      )
  }

  {
    textarea && (
      <div>
        <label for="textarea" class="block text-sm font-medium">
          {textarea.label}
        </label>
        <textarea
          id="textarea"
          name={textarea.name || "textarea"}
          rows={textarea.rows ? textarea.rows : 4}
          placeholder={textarea.placeholder}
          class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
        />
      </div>
    )
  }

  {
    disclaimer && (
      <div class="mt-3 flex items-start">
        <div class="flex mt-0.5">
          <input
            id="disclaimer"
            name="disclaimer"
            type="checkbox"
            class="cursor-pointer mt-1 py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
          />
        </div>
        <div class="ml-3">
          <label for="disclaimer" class="cursor-pointer select-none text-sm text-gray-600 dark:text-gray-400">
            {disclaimer.label}
          </label>
        </div>
      </div>
    )
  }

  {
    button && (
      <div class="mt-10 grid">
        <Button variant="primary" type="submit">{button}</Button>
      </div>
    )
  }

  {
    description && (
      <div class="mt-3 text-center">
        <p class="text-sm text-gray-600 dark:text-gray-400">{description}</p>
      </div>
    )
  }
</form>
